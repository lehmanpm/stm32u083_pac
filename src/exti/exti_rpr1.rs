#[doc = "Register `EXTI_RPR1` reader"]
pub type R = crate::R<ExtiRpr1Spec>;
#[doc = "Register `EXTI_RPR1` writer"]
pub type W = crate::W<ExtiRpr1Spec>;
#[doc = "Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Rpif0 {
    #[doc = "0: No rising edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Rising edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Rpif0> for bool {
    #[inline(always)]
    fn from(variant: Rpif0) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `RPIF0` reader - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif0R = crate::BitReader<Rpif0>;
impl Rpif0R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Rpif0 {
        match self.bits {
            false => Rpif0::B0x0,
            true => Rpif0::B0x1,
        }
    }
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Rpif0::B0x0
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Rpif0::B0x1
    }
}
#[doc = "Field `RPIF0` writer - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif0W<'a, REG> = crate::BitWriter<'a, REG, Rpif0>;
impl<'a, REG> Rpif0W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif0::B0x0)
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif0::B0x1)
    }
}
#[doc = "Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Rpif1 {
    #[doc = "0: No rising edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Rising edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Rpif1> for bool {
    #[inline(always)]
    fn from(variant: Rpif1) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `RPIF1` reader - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif1R = crate::BitReader<Rpif1>;
impl Rpif1R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Rpif1 {
        match self.bits {
            false => Rpif1::B0x0,
            true => Rpif1::B0x1,
        }
    }
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Rpif1::B0x0
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Rpif1::B0x1
    }
}
#[doc = "Field `RPIF1` writer - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif1W<'a, REG> = crate::BitWriter<'a, REG, Rpif1>;
impl<'a, REG> Rpif1W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif1::B0x0)
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif1::B0x1)
    }
}
#[doc = "Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Rpif2 {
    #[doc = "0: No rising edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Rising edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Rpif2> for bool {
    #[inline(always)]
    fn from(variant: Rpif2) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `RPIF2` reader - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif2R = crate::BitReader<Rpif2>;
impl Rpif2R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Rpif2 {
        match self.bits {
            false => Rpif2::B0x0,
            true => Rpif2::B0x1,
        }
    }
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Rpif2::B0x0
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Rpif2::B0x1
    }
}
#[doc = "Field `RPIF2` writer - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif2W<'a, REG> = crate::BitWriter<'a, REG, Rpif2>;
impl<'a, REG> Rpif2W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif2::B0x0)
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif2::B0x1)
    }
}
#[doc = "Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Rpif3 {
    #[doc = "0: No rising edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Rising edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Rpif3> for bool {
    #[inline(always)]
    fn from(variant: Rpif3) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `RPIF3` reader - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif3R = crate::BitReader<Rpif3>;
impl Rpif3R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Rpif3 {
        match self.bits {
            false => Rpif3::B0x0,
            true => Rpif3::B0x1,
        }
    }
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Rpif3::B0x0
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Rpif3::B0x1
    }
}
#[doc = "Field `RPIF3` writer - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif3W<'a, REG> = crate::BitWriter<'a, REG, Rpif3>;
impl<'a, REG> Rpif3W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif3::B0x0)
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif3::B0x1)
    }
}
#[doc = "Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Rpif4 {
    #[doc = "0: No rising edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Rising edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Rpif4> for bool {
    #[inline(always)]
    fn from(variant: Rpif4) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `RPIF4` reader - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif4R = crate::BitReader<Rpif4>;
impl Rpif4R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Rpif4 {
        match self.bits {
            false => Rpif4::B0x0,
            true => Rpif4::B0x1,
        }
    }
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Rpif4::B0x0
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Rpif4::B0x1
    }
}
#[doc = "Field `RPIF4` writer - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif4W<'a, REG> = crate::BitWriter<'a, REG, Rpif4>;
impl<'a, REG> Rpif4W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif4::B0x0)
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif4::B0x1)
    }
}
#[doc = "Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Rpif5 {
    #[doc = "0: No rising edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Rising edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Rpif5> for bool {
    #[inline(always)]
    fn from(variant: Rpif5) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `RPIF5` reader - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif5R = crate::BitReader<Rpif5>;
impl Rpif5R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Rpif5 {
        match self.bits {
            false => Rpif5::B0x0,
            true => Rpif5::B0x1,
        }
    }
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Rpif5::B0x0
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Rpif5::B0x1
    }
}
#[doc = "Field `RPIF5` writer - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif5W<'a, REG> = crate::BitWriter<'a, REG, Rpif5>;
impl<'a, REG> Rpif5W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif5::B0x0)
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif5::B0x1)
    }
}
#[doc = "Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Rpif6 {
    #[doc = "0: No rising edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Rising edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Rpif6> for bool {
    #[inline(always)]
    fn from(variant: Rpif6) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `RPIF6` reader - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif6R = crate::BitReader<Rpif6>;
impl Rpif6R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Rpif6 {
        match self.bits {
            false => Rpif6::B0x0,
            true => Rpif6::B0x1,
        }
    }
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Rpif6::B0x0
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Rpif6::B0x1
    }
}
#[doc = "Field `RPIF6` writer - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif6W<'a, REG> = crate::BitWriter<'a, REG, Rpif6>;
impl<'a, REG> Rpif6W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif6::B0x0)
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif6::B0x1)
    }
}
#[doc = "Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Rpif7 {
    #[doc = "0: No rising edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Rising edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Rpif7> for bool {
    #[inline(always)]
    fn from(variant: Rpif7) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `RPIF7` reader - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif7R = crate::BitReader<Rpif7>;
impl Rpif7R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Rpif7 {
        match self.bits {
            false => Rpif7::B0x0,
            true => Rpif7::B0x1,
        }
    }
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Rpif7::B0x0
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Rpif7::B0x1
    }
}
#[doc = "Field `RPIF7` writer - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif7W<'a, REG> = crate::BitWriter<'a, REG, Rpif7>;
impl<'a, REG> Rpif7W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif7::B0x0)
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif7::B0x1)
    }
}
#[doc = "Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Rpif8 {
    #[doc = "0: No rising edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Rising edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Rpif8> for bool {
    #[inline(always)]
    fn from(variant: Rpif8) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `RPIF8` reader - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif8R = crate::BitReader<Rpif8>;
impl Rpif8R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Rpif8 {
        match self.bits {
            false => Rpif8::B0x0,
            true => Rpif8::B0x1,
        }
    }
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Rpif8::B0x0
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Rpif8::B0x1
    }
}
#[doc = "Field `RPIF8` writer - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif8W<'a, REG> = crate::BitWriter<'a, REG, Rpif8>;
impl<'a, REG> Rpif8W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif8::B0x0)
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif8::B0x1)
    }
}
#[doc = "Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Rpif9 {
    #[doc = "0: No rising edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Rising edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Rpif9> for bool {
    #[inline(always)]
    fn from(variant: Rpif9) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `RPIF9` reader - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif9R = crate::BitReader<Rpif9>;
impl Rpif9R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Rpif9 {
        match self.bits {
            false => Rpif9::B0x0,
            true => Rpif9::B0x1,
        }
    }
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Rpif9::B0x0
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Rpif9::B0x1
    }
}
#[doc = "Field `RPIF9` writer - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif9W<'a, REG> = crate::BitWriter<'a, REG, Rpif9>;
impl<'a, REG> Rpif9W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif9::B0x0)
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif9::B0x1)
    }
}
#[doc = "Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Rpif10 {
    #[doc = "0: No rising edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Rising edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Rpif10> for bool {
    #[inline(always)]
    fn from(variant: Rpif10) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `RPIF10` reader - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif10R = crate::BitReader<Rpif10>;
impl Rpif10R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Rpif10 {
        match self.bits {
            false => Rpif10::B0x0,
            true => Rpif10::B0x1,
        }
    }
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Rpif10::B0x0
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Rpif10::B0x1
    }
}
#[doc = "Field `RPIF10` writer - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif10W<'a, REG> = crate::BitWriter<'a, REG, Rpif10>;
impl<'a, REG> Rpif10W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif10::B0x0)
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif10::B0x1)
    }
}
#[doc = "Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Rpif11 {
    #[doc = "0: No rising edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Rising edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Rpif11> for bool {
    #[inline(always)]
    fn from(variant: Rpif11) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `RPIF11` reader - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif11R = crate::BitReader<Rpif11>;
impl Rpif11R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Rpif11 {
        match self.bits {
            false => Rpif11::B0x0,
            true => Rpif11::B0x1,
        }
    }
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Rpif11::B0x0
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Rpif11::B0x1
    }
}
#[doc = "Field `RPIF11` writer - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif11W<'a, REG> = crate::BitWriter<'a, REG, Rpif11>;
impl<'a, REG> Rpif11W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif11::B0x0)
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif11::B0x1)
    }
}
#[doc = "Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Rpif12 {
    #[doc = "0: No rising edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Rising edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Rpif12> for bool {
    #[inline(always)]
    fn from(variant: Rpif12) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `RPIF12` reader - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif12R = crate::BitReader<Rpif12>;
impl Rpif12R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Rpif12 {
        match self.bits {
            false => Rpif12::B0x0,
            true => Rpif12::B0x1,
        }
    }
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Rpif12::B0x0
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Rpif12::B0x1
    }
}
#[doc = "Field `RPIF12` writer - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif12W<'a, REG> = crate::BitWriter<'a, REG, Rpif12>;
impl<'a, REG> Rpif12W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif12::B0x0)
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif12::B0x1)
    }
}
#[doc = "Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Rpif13 {
    #[doc = "0: No rising edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Rising edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Rpif13> for bool {
    #[inline(always)]
    fn from(variant: Rpif13) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `RPIF13` reader - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif13R = crate::BitReader<Rpif13>;
impl Rpif13R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Rpif13 {
        match self.bits {
            false => Rpif13::B0x0,
            true => Rpif13::B0x1,
        }
    }
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Rpif13::B0x0
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Rpif13::B0x1
    }
}
#[doc = "Field `RPIF13` writer - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif13W<'a, REG> = crate::BitWriter<'a, REG, Rpif13>;
impl<'a, REG> Rpif13W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif13::B0x0)
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif13::B0x1)
    }
}
#[doc = "Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Rpif14 {
    #[doc = "0: No rising edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Rising edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Rpif14> for bool {
    #[inline(always)]
    fn from(variant: Rpif14) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `RPIF14` reader - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif14R = crate::BitReader<Rpif14>;
impl Rpif14R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Rpif14 {
        match self.bits {
            false => Rpif14::B0x0,
            true => Rpif14::B0x1,
        }
    }
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Rpif14::B0x0
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Rpif14::B0x1
    }
}
#[doc = "Field `RPIF14` writer - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif14W<'a, REG> = crate::BitWriter<'a, REG, Rpif14>;
impl<'a, REG> Rpif14W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif14::B0x0)
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif14::B0x1)
    }
}
#[doc = "Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Rpif15 {
    #[doc = "0: No rising edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Rising edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Rpif15> for bool {
    #[inline(always)]
    fn from(variant: Rpif15) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `RPIF15` reader - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif15R = crate::BitReader<Rpif15>;
impl Rpif15R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Rpif15 {
        match self.bits {
            false => Rpif15::B0x0,
            true => Rpif15::B0x1,
        }
    }
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Rpif15::B0x0
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Rpif15::B0x1
    }
}
#[doc = "Field `RPIF15` writer - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif15W<'a, REG> = crate::BitWriter<'a, REG, Rpif15>;
impl<'a, REG> Rpif15W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif15::B0x0)
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif15::B0x1)
    }
}
#[doc = "Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Rpif16 {
    #[doc = "0: No rising edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Rising edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Rpif16> for bool {
    #[inline(always)]
    fn from(variant: Rpif16) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `RPIF16` reader - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif16R = crate::BitReader<Rpif16>;
impl Rpif16R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Rpif16 {
        match self.bits {
            false => Rpif16::B0x0,
            true => Rpif16::B0x1,
        }
    }
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Rpif16::B0x0
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Rpif16::B0x1
    }
}
#[doc = "Field `RPIF16` writer - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif16W<'a, REG> = crate::BitWriter<'a, REG, Rpif16>;
impl<'a, REG> Rpif16W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif16::B0x0)
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif16::B0x1)
    }
}
#[doc = "Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Rpif17 {
    #[doc = "0: No rising edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Rising edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Rpif17> for bool {
    #[inline(always)]
    fn from(variant: Rpif17) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `RPIF17` reader - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif17R = crate::BitReader<Rpif17>;
impl Rpif17R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Rpif17 {
        match self.bits {
            false => Rpif17::B0x0,
            true => Rpif17::B0x1,
        }
    }
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Rpif17::B0x0
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Rpif17::B0x1
    }
}
#[doc = "Field `RPIF17` writer - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif17W<'a, REG> = crate::BitWriter<'a, REG, Rpif17>;
impl<'a, REG> Rpif17W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif17::B0x0)
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif17::B0x1)
    }
}
#[doc = "Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Rpif18 {
    #[doc = "0: No rising edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Rising edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Rpif18> for bool {
    #[inline(always)]
    fn from(variant: Rpif18) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `RPIF18` reader - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif18R = crate::BitReader<Rpif18>;
impl Rpif18R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Rpif18 {
        match self.bits {
            false => Rpif18::B0x0,
            true => Rpif18::B0x1,
        }
    }
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Rpif18::B0x0
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Rpif18::B0x1
    }
}
#[doc = "Field `RPIF18` writer - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif18W<'a, REG> = crate::BitWriter<'a, REG, Rpif18>;
impl<'a, REG> Rpif18W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif18::B0x0)
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif18::B0x1)
    }
}
#[doc = "Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Rpif19 {
    #[doc = "0: No rising edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Rising edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Rpif19> for bool {
    #[inline(always)]
    fn from(variant: Rpif19) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `RPIF19` reader - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif19R = crate::BitReader<Rpif19>;
impl Rpif19R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Rpif19 {
        match self.bits {
            false => Rpif19::B0x0,
            true => Rpif19::B0x1,
        }
    }
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Rpif19::B0x0
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Rpif19::B0x1
    }
}
#[doc = "Field `RPIF19` writer - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif19W<'a, REG> = crate::BitWriter<'a, REG, Rpif19>;
impl<'a, REG> Rpif19W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif19::B0x0)
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif19::B0x1)
    }
}
#[doc = "Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Rpif20 {
    #[doc = "0: No rising edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Rising edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Rpif20> for bool {
    #[inline(always)]
    fn from(variant: Rpif20) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `RPIF20` reader - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif20R = crate::BitReader<Rpif20>;
impl Rpif20R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Rpif20 {
        match self.bits {
            false => Rpif20::B0x0,
            true => Rpif20::B0x1,
        }
    }
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Rpif20::B0x0
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Rpif20::B0x1
    }
}
#[doc = "Field `RPIF20` writer - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif20W<'a, REG> = crate::BitWriter<'a, REG, Rpif20>;
impl<'a, REG> Rpif20W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif20::B0x0)
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif20::B0x1)
    }
}
#[doc = "Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Rpif21 {
    #[doc = "0: No rising edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Rising edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Rpif21> for bool {
    #[inline(always)]
    fn from(variant: Rpif21) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `RPIF21` reader - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif21R = crate::BitReader<Rpif21>;
impl Rpif21R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Rpif21 {
        match self.bits {
            false => Rpif21::B0x0,
            true => Rpif21::B0x1,
        }
    }
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Rpif21::B0x0
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Rpif21::B0x1
    }
}
#[doc = "Field `RPIF21` writer - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Rpif21W<'a, REG> = crate::BitWriter<'a, REG, Rpif21>;
impl<'a, REG> Rpif21W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif21::B0x0)
    }
    #[doc = "Rising edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Rpif21::B0x1)
    }
}
impl R {
    #[doc = "Bit 0 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn rpif0(&self) -> Rpif0R {
        Rpif0R::new((self.bits & 1) != 0)
    }
    #[doc = "Bit 1 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn rpif1(&self) -> Rpif1R {
        Rpif1R::new(((self.bits >> 1) & 1) != 0)
    }
    #[doc = "Bit 2 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn rpif2(&self) -> Rpif2R {
        Rpif2R::new(((self.bits >> 2) & 1) != 0)
    }
    #[doc = "Bit 3 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn rpif3(&self) -> Rpif3R {
        Rpif3R::new(((self.bits >> 3) & 1) != 0)
    }
    #[doc = "Bit 4 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn rpif4(&self) -> Rpif4R {
        Rpif4R::new(((self.bits >> 4) & 1) != 0)
    }
    #[doc = "Bit 5 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn rpif5(&self) -> Rpif5R {
        Rpif5R::new(((self.bits >> 5) & 1) != 0)
    }
    #[doc = "Bit 6 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn rpif6(&self) -> Rpif6R {
        Rpif6R::new(((self.bits >> 6) & 1) != 0)
    }
    #[doc = "Bit 7 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn rpif7(&self) -> Rpif7R {
        Rpif7R::new(((self.bits >> 7) & 1) != 0)
    }
    #[doc = "Bit 8 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn rpif8(&self) -> Rpif8R {
        Rpif8R::new(((self.bits >> 8) & 1) != 0)
    }
    #[doc = "Bit 9 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn rpif9(&self) -> Rpif9R {
        Rpif9R::new(((self.bits >> 9) & 1) != 0)
    }
    #[doc = "Bit 10 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn rpif10(&self) -> Rpif10R {
        Rpif10R::new(((self.bits >> 10) & 1) != 0)
    }
    #[doc = "Bit 11 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn rpif11(&self) -> Rpif11R {
        Rpif11R::new(((self.bits >> 11) & 1) != 0)
    }
    #[doc = "Bit 12 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn rpif12(&self) -> Rpif12R {
        Rpif12R::new(((self.bits >> 12) & 1) != 0)
    }
    #[doc = "Bit 13 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn rpif13(&self) -> Rpif13R {
        Rpif13R::new(((self.bits >> 13) & 1) != 0)
    }
    #[doc = "Bit 14 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn rpif14(&self) -> Rpif14R {
        Rpif14R::new(((self.bits >> 14) & 1) != 0)
    }
    #[doc = "Bit 15 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn rpif15(&self) -> Rpif15R {
        Rpif15R::new(((self.bits >> 15) & 1) != 0)
    }
    #[doc = "Bit 16 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn rpif16(&self) -> Rpif16R {
        Rpif16R::new(((self.bits >> 16) & 1) != 0)
    }
    #[doc = "Bit 17 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn rpif17(&self) -> Rpif17R {
        Rpif17R::new(((self.bits >> 17) & 1) != 0)
    }
    #[doc = "Bit 18 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn rpif18(&self) -> Rpif18R {
        Rpif18R::new(((self.bits >> 18) & 1) != 0)
    }
    #[doc = "Bit 19 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn rpif19(&self) -> Rpif19R {
        Rpif19R::new(((self.bits >> 19) & 1) != 0)
    }
    #[doc = "Bit 20 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn rpif20(&self) -> Rpif20R {
        Rpif20R::new(((self.bits >> 20) & 1) != 0)
    }
    #[doc = "Bit 21 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn rpif21(&self) -> Rpif21R {
        Rpif21R::new(((self.bits >> 21) & 1) != 0)
    }
}
impl W {
    #[doc = "Bit 0 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn rpif0(&mut self) -> Rpif0W<ExtiRpr1Spec> {
        Rpif0W::new(self, 0)
    }
    #[doc = "Bit 1 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn rpif1(&mut self) -> Rpif1W<ExtiRpr1Spec> {
        Rpif1W::new(self, 1)
    }
    #[doc = "Bit 2 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn rpif2(&mut self) -> Rpif2W<ExtiRpr1Spec> {
        Rpif2W::new(self, 2)
    }
    #[doc = "Bit 3 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn rpif3(&mut self) -> Rpif3W<ExtiRpr1Spec> {
        Rpif3W::new(self, 3)
    }
    #[doc = "Bit 4 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn rpif4(&mut self) -> Rpif4W<ExtiRpr1Spec> {
        Rpif4W::new(self, 4)
    }
    #[doc = "Bit 5 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn rpif5(&mut self) -> Rpif5W<ExtiRpr1Spec> {
        Rpif5W::new(self, 5)
    }
    #[doc = "Bit 6 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn rpif6(&mut self) -> Rpif6W<ExtiRpr1Spec> {
        Rpif6W::new(self, 6)
    }
    #[doc = "Bit 7 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn rpif7(&mut self) -> Rpif7W<ExtiRpr1Spec> {
        Rpif7W::new(self, 7)
    }
    #[doc = "Bit 8 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn rpif8(&mut self) -> Rpif8W<ExtiRpr1Spec> {
        Rpif8W::new(self, 8)
    }
    #[doc = "Bit 9 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn rpif9(&mut self) -> Rpif9W<ExtiRpr1Spec> {
        Rpif9W::new(self, 9)
    }
    #[doc = "Bit 10 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn rpif10(&mut self) -> Rpif10W<ExtiRpr1Spec> {
        Rpif10W::new(self, 10)
    }
    #[doc = "Bit 11 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn rpif11(&mut self) -> Rpif11W<ExtiRpr1Spec> {
        Rpif11W::new(self, 11)
    }
    #[doc = "Bit 12 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn rpif12(&mut self) -> Rpif12W<ExtiRpr1Spec> {
        Rpif12W::new(self, 12)
    }
    #[doc = "Bit 13 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn rpif13(&mut self) -> Rpif13W<ExtiRpr1Spec> {
        Rpif13W::new(self, 13)
    }
    #[doc = "Bit 14 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn rpif14(&mut self) -> Rpif14W<ExtiRpr1Spec> {
        Rpif14W::new(self, 14)
    }
    #[doc = "Bit 15 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn rpif15(&mut self) -> Rpif15W<ExtiRpr1Spec> {
        Rpif15W::new(self, 15)
    }
    #[doc = "Bit 16 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn rpif16(&mut self) -> Rpif16W<ExtiRpr1Spec> {
        Rpif16W::new(self, 16)
    }
    #[doc = "Bit 17 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn rpif17(&mut self) -> Rpif17W<ExtiRpr1Spec> {
        Rpif17W::new(self, 17)
    }
    #[doc = "Bit 18 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn rpif18(&mut self) -> Rpif18W<ExtiRpr1Spec> {
        Rpif18W::new(self, 18)
    }
    #[doc = "Bit 19 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn rpif19(&mut self) -> Rpif19W<ExtiRpr1Spec> {
        Rpif19W::new(self, 19)
    }
    #[doc = "Bit 20 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn rpif20(&mut self) -> Rpif20W<ExtiRpr1Spec> {
        Rpif20W::new(self, 20)
    }
    #[doc = "Bit 21 - Rising edge event pending for configurable line x (x1=1211to10) Each bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn rpif21(&mut self) -> Rpif21W<ExtiRpr1Spec> {
        Rpif21W::new(self, 21)
    }
}
#[doc = "EXTI rising edge pending register 1\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`exti_rpr1::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`exti_rpr1::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct ExtiRpr1Spec;
impl crate::RegisterSpec for ExtiRpr1Spec {
    type Ux = u32;
}
#[doc = "`read()` method returns [`exti_rpr1::R`](R) reader structure"]
impl crate::Readable for ExtiRpr1Spec {}
#[doc = "`write(|w| ..)` method takes [`exti_rpr1::W`](W) writer structure"]
impl crate::Writable for ExtiRpr1Spec {
    type Safety = crate::Unsafe;
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
}
#[doc = "`reset()` method sets EXTI_RPR1 to value 0"]
impl crate::Resettable for ExtiRpr1Spec {
    const RESET_VALUE: u32 = 0;
}
