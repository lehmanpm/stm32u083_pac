#[doc = "Register `EXTI_FPR1` reader"]
pub type R = crate::R<ExtiFpr1Spec>;
#[doc = "Register `EXTI_FPR1` writer"]
pub type W = crate::W<ExtiFpr1Spec>;
#[doc = "Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Fpif0 {
    #[doc = "0: No falling edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Falling edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Fpif0> for bool {
    #[inline(always)]
    fn from(variant: Fpif0) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPIF0` reader - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif0R = crate::BitReader<Fpif0>;
impl Fpif0R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Fpif0 {
        match self.bits {
            false => Fpif0::B0x0,
            true => Fpif0::B0x1,
        }
    }
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Fpif0::B0x0
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Fpif0::B0x1
    }
}
#[doc = "Field `FPIF0` writer - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif0W<'a, REG> = crate::BitWriter<'a, REG, Fpif0>;
impl<'a, REG> Fpif0W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif0::B0x0)
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif0::B0x1)
    }
}
#[doc = "Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Fpif1 {
    #[doc = "0: No falling edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Falling edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Fpif1> for bool {
    #[inline(always)]
    fn from(variant: Fpif1) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPIF1` reader - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif1R = crate::BitReader<Fpif1>;
impl Fpif1R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Fpif1 {
        match self.bits {
            false => Fpif1::B0x0,
            true => Fpif1::B0x1,
        }
    }
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Fpif1::B0x0
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Fpif1::B0x1
    }
}
#[doc = "Field `FPIF1` writer - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif1W<'a, REG> = crate::BitWriter<'a, REG, Fpif1>;
impl<'a, REG> Fpif1W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif1::B0x0)
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif1::B0x1)
    }
}
#[doc = "Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Fpif2 {
    #[doc = "0: No falling edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Falling edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Fpif2> for bool {
    #[inline(always)]
    fn from(variant: Fpif2) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPIF2` reader - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif2R = crate::BitReader<Fpif2>;
impl Fpif2R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Fpif2 {
        match self.bits {
            false => Fpif2::B0x0,
            true => Fpif2::B0x1,
        }
    }
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Fpif2::B0x0
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Fpif2::B0x1
    }
}
#[doc = "Field `FPIF2` writer - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif2W<'a, REG> = crate::BitWriter<'a, REG, Fpif2>;
impl<'a, REG> Fpif2W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif2::B0x0)
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif2::B0x1)
    }
}
#[doc = "Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Fpif3 {
    #[doc = "0: No falling edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Falling edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Fpif3> for bool {
    #[inline(always)]
    fn from(variant: Fpif3) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPIF3` reader - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif3R = crate::BitReader<Fpif3>;
impl Fpif3R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Fpif3 {
        match self.bits {
            false => Fpif3::B0x0,
            true => Fpif3::B0x1,
        }
    }
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Fpif3::B0x0
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Fpif3::B0x1
    }
}
#[doc = "Field `FPIF3` writer - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif3W<'a, REG> = crate::BitWriter<'a, REG, Fpif3>;
impl<'a, REG> Fpif3W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif3::B0x0)
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif3::B0x1)
    }
}
#[doc = "Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Fpif4 {
    #[doc = "0: No falling edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Falling edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Fpif4> for bool {
    #[inline(always)]
    fn from(variant: Fpif4) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPIF4` reader - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif4R = crate::BitReader<Fpif4>;
impl Fpif4R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Fpif4 {
        match self.bits {
            false => Fpif4::B0x0,
            true => Fpif4::B0x1,
        }
    }
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Fpif4::B0x0
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Fpif4::B0x1
    }
}
#[doc = "Field `FPIF4` writer - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif4W<'a, REG> = crate::BitWriter<'a, REG, Fpif4>;
impl<'a, REG> Fpif4W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif4::B0x0)
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif4::B0x1)
    }
}
#[doc = "Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Fpif5 {
    #[doc = "0: No falling edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Falling edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Fpif5> for bool {
    #[inline(always)]
    fn from(variant: Fpif5) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPIF5` reader - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif5R = crate::BitReader<Fpif5>;
impl Fpif5R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Fpif5 {
        match self.bits {
            false => Fpif5::B0x0,
            true => Fpif5::B0x1,
        }
    }
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Fpif5::B0x0
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Fpif5::B0x1
    }
}
#[doc = "Field `FPIF5` writer - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif5W<'a, REG> = crate::BitWriter<'a, REG, Fpif5>;
impl<'a, REG> Fpif5W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif5::B0x0)
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif5::B0x1)
    }
}
#[doc = "Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Fpif6 {
    #[doc = "0: No falling edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Falling edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Fpif6> for bool {
    #[inline(always)]
    fn from(variant: Fpif6) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPIF6` reader - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif6R = crate::BitReader<Fpif6>;
impl Fpif6R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Fpif6 {
        match self.bits {
            false => Fpif6::B0x0,
            true => Fpif6::B0x1,
        }
    }
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Fpif6::B0x0
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Fpif6::B0x1
    }
}
#[doc = "Field `FPIF6` writer - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif6W<'a, REG> = crate::BitWriter<'a, REG, Fpif6>;
impl<'a, REG> Fpif6W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif6::B0x0)
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif6::B0x1)
    }
}
#[doc = "Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Fpif7 {
    #[doc = "0: No falling edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Falling edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Fpif7> for bool {
    #[inline(always)]
    fn from(variant: Fpif7) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPIF7` reader - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif7R = crate::BitReader<Fpif7>;
impl Fpif7R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Fpif7 {
        match self.bits {
            false => Fpif7::B0x0,
            true => Fpif7::B0x1,
        }
    }
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Fpif7::B0x0
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Fpif7::B0x1
    }
}
#[doc = "Field `FPIF7` writer - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif7W<'a, REG> = crate::BitWriter<'a, REG, Fpif7>;
impl<'a, REG> Fpif7W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif7::B0x0)
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif7::B0x1)
    }
}
#[doc = "Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Fpif8 {
    #[doc = "0: No falling edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Falling edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Fpif8> for bool {
    #[inline(always)]
    fn from(variant: Fpif8) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPIF8` reader - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif8R = crate::BitReader<Fpif8>;
impl Fpif8R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Fpif8 {
        match self.bits {
            false => Fpif8::B0x0,
            true => Fpif8::B0x1,
        }
    }
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Fpif8::B0x0
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Fpif8::B0x1
    }
}
#[doc = "Field `FPIF8` writer - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif8W<'a, REG> = crate::BitWriter<'a, REG, Fpif8>;
impl<'a, REG> Fpif8W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif8::B0x0)
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif8::B0x1)
    }
}
#[doc = "Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Fpif9 {
    #[doc = "0: No falling edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Falling edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Fpif9> for bool {
    #[inline(always)]
    fn from(variant: Fpif9) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPIF9` reader - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif9R = crate::BitReader<Fpif9>;
impl Fpif9R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Fpif9 {
        match self.bits {
            false => Fpif9::B0x0,
            true => Fpif9::B0x1,
        }
    }
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Fpif9::B0x0
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Fpif9::B0x1
    }
}
#[doc = "Field `FPIF9` writer - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif9W<'a, REG> = crate::BitWriter<'a, REG, Fpif9>;
impl<'a, REG> Fpif9W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif9::B0x0)
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif9::B0x1)
    }
}
#[doc = "Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Fpif10 {
    #[doc = "0: No falling edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Falling edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Fpif10> for bool {
    #[inline(always)]
    fn from(variant: Fpif10) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPIF10` reader - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif10R = crate::BitReader<Fpif10>;
impl Fpif10R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Fpif10 {
        match self.bits {
            false => Fpif10::B0x0,
            true => Fpif10::B0x1,
        }
    }
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Fpif10::B0x0
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Fpif10::B0x1
    }
}
#[doc = "Field `FPIF10` writer - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif10W<'a, REG> = crate::BitWriter<'a, REG, Fpif10>;
impl<'a, REG> Fpif10W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif10::B0x0)
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif10::B0x1)
    }
}
#[doc = "Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Fpif11 {
    #[doc = "0: No falling edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Falling edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Fpif11> for bool {
    #[inline(always)]
    fn from(variant: Fpif11) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPIF11` reader - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif11R = crate::BitReader<Fpif11>;
impl Fpif11R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Fpif11 {
        match self.bits {
            false => Fpif11::B0x0,
            true => Fpif11::B0x1,
        }
    }
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Fpif11::B0x0
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Fpif11::B0x1
    }
}
#[doc = "Field `FPIF11` writer - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif11W<'a, REG> = crate::BitWriter<'a, REG, Fpif11>;
impl<'a, REG> Fpif11W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif11::B0x0)
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif11::B0x1)
    }
}
#[doc = "Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Fpif12 {
    #[doc = "0: No falling edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Falling edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Fpif12> for bool {
    #[inline(always)]
    fn from(variant: Fpif12) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPIF12` reader - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif12R = crate::BitReader<Fpif12>;
impl Fpif12R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Fpif12 {
        match self.bits {
            false => Fpif12::B0x0,
            true => Fpif12::B0x1,
        }
    }
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Fpif12::B0x0
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Fpif12::B0x1
    }
}
#[doc = "Field `FPIF12` writer - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif12W<'a, REG> = crate::BitWriter<'a, REG, Fpif12>;
impl<'a, REG> Fpif12W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif12::B0x0)
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif12::B0x1)
    }
}
#[doc = "Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Fpif13 {
    #[doc = "0: No falling edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Falling edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Fpif13> for bool {
    #[inline(always)]
    fn from(variant: Fpif13) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPIF13` reader - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif13R = crate::BitReader<Fpif13>;
impl Fpif13R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Fpif13 {
        match self.bits {
            false => Fpif13::B0x0,
            true => Fpif13::B0x1,
        }
    }
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Fpif13::B0x0
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Fpif13::B0x1
    }
}
#[doc = "Field `FPIF13` writer - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif13W<'a, REG> = crate::BitWriter<'a, REG, Fpif13>;
impl<'a, REG> Fpif13W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif13::B0x0)
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif13::B0x1)
    }
}
#[doc = "Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Fpif14 {
    #[doc = "0: No falling edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Falling edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Fpif14> for bool {
    #[inline(always)]
    fn from(variant: Fpif14) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPIF14` reader - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif14R = crate::BitReader<Fpif14>;
impl Fpif14R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Fpif14 {
        match self.bits {
            false => Fpif14::B0x0,
            true => Fpif14::B0x1,
        }
    }
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Fpif14::B0x0
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Fpif14::B0x1
    }
}
#[doc = "Field `FPIF14` writer - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif14W<'a, REG> = crate::BitWriter<'a, REG, Fpif14>;
impl<'a, REG> Fpif14W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif14::B0x0)
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif14::B0x1)
    }
}
#[doc = "Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Fpif15 {
    #[doc = "0: No falling edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Falling edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Fpif15> for bool {
    #[inline(always)]
    fn from(variant: Fpif15) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPIF15` reader - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif15R = crate::BitReader<Fpif15>;
impl Fpif15R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Fpif15 {
        match self.bits {
            false => Fpif15::B0x0,
            true => Fpif15::B0x1,
        }
    }
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Fpif15::B0x0
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Fpif15::B0x1
    }
}
#[doc = "Field `FPIF15` writer - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif15W<'a, REG> = crate::BitWriter<'a, REG, Fpif15>;
impl<'a, REG> Fpif15W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif15::B0x0)
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif15::B0x1)
    }
}
#[doc = "Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Fpif16 {
    #[doc = "0: No falling edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Falling edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Fpif16> for bool {
    #[inline(always)]
    fn from(variant: Fpif16) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPIF16` reader - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif16R = crate::BitReader<Fpif16>;
impl Fpif16R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Fpif16 {
        match self.bits {
            false => Fpif16::B0x0,
            true => Fpif16::B0x1,
        }
    }
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Fpif16::B0x0
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Fpif16::B0x1
    }
}
#[doc = "Field `FPIF16` writer - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif16W<'a, REG> = crate::BitWriter<'a, REG, Fpif16>;
impl<'a, REG> Fpif16W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif16::B0x0)
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif16::B0x1)
    }
}
#[doc = "Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Fpif17 {
    #[doc = "0: No falling edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Falling edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Fpif17> for bool {
    #[inline(always)]
    fn from(variant: Fpif17) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPIF17` reader - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif17R = crate::BitReader<Fpif17>;
impl Fpif17R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Fpif17 {
        match self.bits {
            false => Fpif17::B0x0,
            true => Fpif17::B0x1,
        }
    }
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Fpif17::B0x0
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Fpif17::B0x1
    }
}
#[doc = "Field `FPIF17` writer - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif17W<'a, REG> = crate::BitWriter<'a, REG, Fpif17>;
impl<'a, REG> Fpif17W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif17::B0x0)
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif17::B0x1)
    }
}
#[doc = "Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Fpif18 {
    #[doc = "0: No falling edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Falling edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Fpif18> for bool {
    #[inline(always)]
    fn from(variant: Fpif18) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPIF18` reader - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif18R = crate::BitReader<Fpif18>;
impl Fpif18R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Fpif18 {
        match self.bits {
            false => Fpif18::B0x0,
            true => Fpif18::B0x1,
        }
    }
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Fpif18::B0x0
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Fpif18::B0x1
    }
}
#[doc = "Field `FPIF18` writer - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif18W<'a, REG> = crate::BitWriter<'a, REG, Fpif18>;
impl<'a, REG> Fpif18W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif18::B0x0)
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif18::B0x1)
    }
}
#[doc = "Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Fpif19 {
    #[doc = "0: No falling edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Falling edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Fpif19> for bool {
    #[inline(always)]
    fn from(variant: Fpif19) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPIF19` reader - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif19R = crate::BitReader<Fpif19>;
impl Fpif19R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Fpif19 {
        match self.bits {
            false => Fpif19::B0x0,
            true => Fpif19::B0x1,
        }
    }
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Fpif19::B0x0
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Fpif19::B0x1
    }
}
#[doc = "Field `FPIF19` writer - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif19W<'a, REG> = crate::BitWriter<'a, REG, Fpif19>;
impl<'a, REG> Fpif19W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif19::B0x0)
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif19::B0x1)
    }
}
#[doc = "Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Fpif20 {
    #[doc = "0: No falling edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Falling edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Fpif20> for bool {
    #[inline(always)]
    fn from(variant: Fpif20) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPIF20` reader - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif20R = crate::BitReader<Fpif20>;
impl Fpif20R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Fpif20 {
        match self.bits {
            false => Fpif20::B0x0,
            true => Fpif20::B0x1,
        }
    }
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Fpif20::B0x0
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Fpif20::B0x1
    }
}
#[doc = "Field `FPIF20` writer - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif20W<'a, REG> = crate::BitWriter<'a, REG, Fpif20>;
impl<'a, REG> Fpif20W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif20::B0x0)
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif20::B0x1)
    }
}
#[doc = "Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Fpif21 {
    #[doc = "0: No falling edge trigger request occurred"]
    B0x0 = 0,
    #[doc = "1: Falling edge trigger request occurred"]
    B0x1 = 1,
}
impl From<Fpif21> for bool {
    #[inline(always)]
    fn from(variant: Fpif21) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPIF21` reader - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif21R = crate::BitReader<Fpif21>;
impl Fpif21R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Fpif21 {
        match self.bits {
            false => Fpif21::B0x0,
            true => Fpif21::B0x1,
        }
    }
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == Fpif21::B0x0
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == Fpif21::B0x1
    }
}
#[doc = "Field `FPIF21` writer - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
pub type Fpif21W<'a, REG> = crate::BitWriter<'a, REG, Fpif21>;
impl<'a, REG> Fpif21W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif21::B0x0)
    }
    #[doc = "Falling edge trigger request occurred"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(Fpif21::B0x1)
    }
}
impl R {
    #[doc = "Bit 0 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn fpif0(&self) -> Fpif0R {
        Fpif0R::new((self.bits & 1) != 0)
    }
    #[doc = "Bit 1 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn fpif1(&self) -> Fpif1R {
        Fpif1R::new(((self.bits >> 1) & 1) != 0)
    }
    #[doc = "Bit 2 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn fpif2(&self) -> Fpif2R {
        Fpif2R::new(((self.bits >> 2) & 1) != 0)
    }
    #[doc = "Bit 3 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn fpif3(&self) -> Fpif3R {
        Fpif3R::new(((self.bits >> 3) & 1) != 0)
    }
    #[doc = "Bit 4 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn fpif4(&self) -> Fpif4R {
        Fpif4R::new(((self.bits >> 4) & 1) != 0)
    }
    #[doc = "Bit 5 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn fpif5(&self) -> Fpif5R {
        Fpif5R::new(((self.bits >> 5) & 1) != 0)
    }
    #[doc = "Bit 6 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn fpif6(&self) -> Fpif6R {
        Fpif6R::new(((self.bits >> 6) & 1) != 0)
    }
    #[doc = "Bit 7 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn fpif7(&self) -> Fpif7R {
        Fpif7R::new(((self.bits >> 7) & 1) != 0)
    }
    #[doc = "Bit 8 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn fpif8(&self) -> Fpif8R {
        Fpif8R::new(((self.bits >> 8) & 1) != 0)
    }
    #[doc = "Bit 9 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn fpif9(&self) -> Fpif9R {
        Fpif9R::new(((self.bits >> 9) & 1) != 0)
    }
    #[doc = "Bit 10 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn fpif10(&self) -> Fpif10R {
        Fpif10R::new(((self.bits >> 10) & 1) != 0)
    }
    #[doc = "Bit 11 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn fpif11(&self) -> Fpif11R {
        Fpif11R::new(((self.bits >> 11) & 1) != 0)
    }
    #[doc = "Bit 12 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn fpif12(&self) -> Fpif12R {
        Fpif12R::new(((self.bits >> 12) & 1) != 0)
    }
    #[doc = "Bit 13 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn fpif13(&self) -> Fpif13R {
        Fpif13R::new(((self.bits >> 13) & 1) != 0)
    }
    #[doc = "Bit 14 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn fpif14(&self) -> Fpif14R {
        Fpif14R::new(((self.bits >> 14) & 1) != 0)
    }
    #[doc = "Bit 15 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn fpif15(&self) -> Fpif15R {
        Fpif15R::new(((self.bits >> 15) & 1) != 0)
    }
    #[doc = "Bit 16 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn fpif16(&self) -> Fpif16R {
        Fpif16R::new(((self.bits >> 16) & 1) != 0)
    }
    #[doc = "Bit 17 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn fpif17(&self) -> Fpif17R {
        Fpif17R::new(((self.bits >> 17) & 1) != 0)
    }
    #[doc = "Bit 18 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn fpif18(&self) -> Fpif18R {
        Fpif18R::new(((self.bits >> 18) & 1) != 0)
    }
    #[doc = "Bit 19 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn fpif19(&self) -> Fpif19R {
        Fpif19R::new(((self.bits >> 19) & 1) != 0)
    }
    #[doc = "Bit 20 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn fpif20(&self) -> Fpif20R {
        Fpif20R::new(((self.bits >> 20) & 1) != 0)
    }
    #[doc = "Bit 21 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    pub fn fpif21(&self) -> Fpif21R {
        Fpif21R::new(((self.bits >> 21) & 1) != 0)
    }
}
impl W {
    #[doc = "Bit 0 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn fpif0(&mut self) -> Fpif0W<ExtiFpr1Spec> {
        Fpif0W::new(self, 0)
    }
    #[doc = "Bit 1 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn fpif1(&mut self) -> Fpif1W<ExtiFpr1Spec> {
        Fpif1W::new(self, 1)
    }
    #[doc = "Bit 2 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn fpif2(&mut self) -> Fpif2W<ExtiFpr1Spec> {
        Fpif2W::new(self, 2)
    }
    #[doc = "Bit 3 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn fpif3(&mut self) -> Fpif3W<ExtiFpr1Spec> {
        Fpif3W::new(self, 3)
    }
    #[doc = "Bit 4 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn fpif4(&mut self) -> Fpif4W<ExtiFpr1Spec> {
        Fpif4W::new(self, 4)
    }
    #[doc = "Bit 5 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn fpif5(&mut self) -> Fpif5W<ExtiFpr1Spec> {
        Fpif5W::new(self, 5)
    }
    #[doc = "Bit 6 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn fpif6(&mut self) -> Fpif6W<ExtiFpr1Spec> {
        Fpif6W::new(self, 6)
    }
    #[doc = "Bit 7 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn fpif7(&mut self) -> Fpif7W<ExtiFpr1Spec> {
        Fpif7W::new(self, 7)
    }
    #[doc = "Bit 8 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn fpif8(&mut self) -> Fpif8W<ExtiFpr1Spec> {
        Fpif8W::new(self, 8)
    }
    #[doc = "Bit 9 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn fpif9(&mut self) -> Fpif9W<ExtiFpr1Spec> {
        Fpif9W::new(self, 9)
    }
    #[doc = "Bit 10 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn fpif10(&mut self) -> Fpif10W<ExtiFpr1Spec> {
        Fpif10W::new(self, 10)
    }
    #[doc = "Bit 11 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn fpif11(&mut self) -> Fpif11W<ExtiFpr1Spec> {
        Fpif11W::new(self, 11)
    }
    #[doc = "Bit 12 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn fpif12(&mut self) -> Fpif12W<ExtiFpr1Spec> {
        Fpif12W::new(self, 12)
    }
    #[doc = "Bit 13 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn fpif13(&mut self) -> Fpif13W<ExtiFpr1Spec> {
        Fpif13W::new(self, 13)
    }
    #[doc = "Bit 14 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn fpif14(&mut self) -> Fpif14W<ExtiFpr1Spec> {
        Fpif14W::new(self, 14)
    }
    #[doc = "Bit 15 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn fpif15(&mut self) -> Fpif15W<ExtiFpr1Spec> {
        Fpif15W::new(self, 15)
    }
    #[doc = "Bit 16 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn fpif16(&mut self) -> Fpif16W<ExtiFpr1Spec> {
        Fpif16W::new(self, 16)
    }
    #[doc = "Bit 17 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn fpif17(&mut self) -> Fpif17W<ExtiFpr1Spec> {
        Fpif17W::new(self, 17)
    }
    #[doc = "Bit 18 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn fpif18(&mut self) -> Fpif18W<ExtiFpr1Spec> {
        Fpif18W::new(self, 18)
    }
    #[doc = "Bit 19 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn fpif19(&mut self) -> Fpif19W<ExtiFpr1Spec> {
        Fpif19W::new(self, 19)
    }
    #[doc = "Bit 20 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn fpif20(&mut self) -> Fpif20W<ExtiFpr1Spec> {
        Fpif20W::new(self, 20)
    }
    #[doc = "Bit 21 - Falling edge event pending for configurable line x (x1=1211to10) Each bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it. Bits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."]
    #[inline(always)]
    #[must_use]
    pub fn fpif21(&mut self) -> Fpif21W<ExtiFpr1Spec> {
        Fpif21W::new(self, 21)
    }
}
#[doc = "EXTI falling edge pending register 1\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`exti_fpr1::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`exti_fpr1::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct ExtiFpr1Spec;
impl crate::RegisterSpec for ExtiFpr1Spec {
    type Ux = u32;
}
#[doc = "`read()` method returns [`exti_fpr1::R`](R) reader structure"]
impl crate::Readable for ExtiFpr1Spec {}
#[doc = "`write(|w| ..)` method takes [`exti_fpr1::W`](W) writer structure"]
impl crate::Writable for ExtiFpr1Spec {
    type Safety = crate::Unsafe;
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
}
#[doc = "`reset()` method sets EXTI_FPR1 to value 0"]
impl crate::Resettable for ExtiFpr1Spec {
    const RESET_VALUE: u32 = 0;
}
